{"meta": {"type": "db", "canSave": true, "canEdit": true, "canAdmin": true, "canStar": true, "slug": "filter-metrics", "url": "/d/JpV16zlMk/filter-metrics", "expires": "0001-01-01T00:00:00Z", "created": "2021-03-29T14:47:44Z", "updated": "2021-03-29T15:07:28Z", "updatedBy": "admin", "createdBy": "admin", "version": 10, "hasAcl": false, "isFolder": false, "folderId": 0, "folderUid": "", "folderTitle": "General", "folderUrl": "", "provisioned": false, "provisionedExternalId": ""}, "dashboard": {"annotations": {"list": [{"builtIn": 1, "datasource": "-- Grafana --", "enable": true, "hide": true, "iconColor": "rgba(0, 211, 255, 1)", "name": "Annotations & Alerts", "type": "dashboard"}]}, "editable": true, "gnetId": null, "graphTooltip": 0, "id": 60, "iteration": 1617030331746, "links": [], "panels": [{"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 6, "y": 0}, "id": 71, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "console.log(data)\nlet selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nconst metric = data.request.scopedVars.METRICS.value\nconsole.log(metric)\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(metric, os, job),\n            marker: {size:10},\n            \"text\": getField(metric, os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "repeat": "METRICS", "repeatDirection": "v", "scopedVars": {"METRICS": {"selected": true, "text": "Failed Count", "value": "FC"}}, "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "${METRICS:text}", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 6, "y": 8}, "id": 72, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nconst metric = data.request.scopedVars.METRICS.value\nconsole.log(metric)\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(metric, os, job),\n            marker: {size:10},\n            \"text\": getField(metric, os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "repeatDirection": "v", "repeatIteration": 1617030331746, "repeatPanelId": 71, "scopedVars": {"METRICS": {"selected": true, "text": "Total Count", "value": "TC"}}, "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "${METRICS:text}", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 6, "y": 16}, "id": 73, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nconst metric = data.request.scopedVars.METRICS.value\nconsole.log(metric)\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(metric, os, job),\n            marker: {size:10},\n            \"text\": getField(metric, os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "repeatDirection": "v", "repeatIteration": 1617030331746, "repeatPanelId": 71, "scopedVars": {"METRICS": {"selected": true, "text": "Pass Rate", "value": "Rate"}}, "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "${METRICS:text}", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 6, "y": 24}, "id": 74, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nconst metric = data.request.scopedVars.METRICS.value\nconsole.log(metric)\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(metric, os, job),\n            marker: {size:10},\n            \"text\": getField(metric, os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "repeatDirection": "v", "repeatIteration": 1617030331746, "repeatPanelId": 71, "scopedVars": {"METRICS": {"selected": true, "text": "Pass Count", "value": "PC"}}, "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "${METRICS:text}", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 6, "y": 32}, "id": 70, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)", "title": "Pass Rate (%)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"Rate\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"Rate\", os, job),\n            \"mode\": \"markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Pass Rate", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 40}, "id": 54, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"TC\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"TC\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Total Count", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {"align": null, "filterable": false}, "mappings": [], "thresholds": {"mode": "absolute", "steps": [{"color": "green", "value": null}, {"color": "red", "value": 80}]}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 40}, "id": 39, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"FC\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"FC\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Failed Count", "transformations": [], "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 48}, "id": 40, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"PC\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"PC\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Passed Count", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 48}, "id": 43, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"Failed\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"Failed\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Failed Jobs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 56}, "id": 42, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"Aborted\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"Aborted\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Aborted Jobs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 56}, "id": 45, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"Succ\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"Succ\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Successful Jobs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 64}, "id": 44, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"Unstable\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"Unstable\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Unstable Jobs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 64}, "id": 66, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"FreshTotalTime(hrs)\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"FreshTotalTime(hrs)\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Fresh Run Time (Hours)", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 72}, "id": 52, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"TotalTime(hrs)\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"TotalTime(hrs)\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Total Time (Hours)", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 72}, "id": 47, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"#Jobs\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"#Jobs\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Number of Jobs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 80}, "id": 46, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"#Comp\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"#Comp\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Number of Components", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 80}, "id": 49, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"#Runs\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"#Runs\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Number of Runs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 88}, "id": 68, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"#FreshJobs\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"#FreshJobs\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Number of Fresh Jobs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 88}, "id": 48, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"#Reruns\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"#Reruns\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Number of Reruns", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 96}, "id": 69, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"#FreshRuns\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"#FreshRuns\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Number of Fresh Runs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 96}, "id": 51, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"RerunRate\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"RerunRate\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Rerun Rate", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 0, "y": 104}, "id": 67, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"#RerunJobs\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"#RerunJobs\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Number of Rerun Jobs", "type": "ae3e-plotly-panel"}, {"datasource": "-- Dashboard --", "fieldConfig": {"defaults": {"custom": {}}, "overrides": []}, "gridPos": {"h": 8, "w": 12, "x": 12, "y": 104}, "id": 53, "options": {"config": {"displayModeBar": false}, "data": [{"line": {"color": "#989bea "}, "type": "scatter"}], "layout": {"font": {"color": "darkgrey"}, "margin": {"b": 60, "pad": 10, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "xaxis": {"gridcolor": "rgba(255,255,255,0.22)", "type": "string"}, "yaxis": {"gridcolor": "rgba(255,255,255,0.22)"}}, "onclick": "window.updateVariables({query:{'var-project':'test'}, partial: true})", "script": "let selectedOS = data.request.scopedVars.OS.value\nif (typeof selectedOS === \"string\") {\n    selectedOS = [selectedOS]\n}\nselectedOS.sort();\n\nconst isCombined = data.request.scopedVars.CLUSTER_SIZE.value === \"combo\";\n\nlet builds = []\n\nfor (const build of data.series[0].fields.find(field => field.name === \"Build\").values.buffer) {\n    if (!builds.includes(build)) {\n        builds.push(build)\n    }\n}\n\nbuilds = builds.slice(0, 14);\nbuilds.reverse();\n\nconst numDataPoints = data.series[0].fields.find(field => field.name === \"Build\").values.buffer.length;\n\nconst OSMap = {}\n\nconst os = data.series[0].fields.find(field => field.name === \"OS\").values.buffer\nconst build = data.series[0].fields.find(field => field.name === \"Build\").values.buffer\nconst len = data.series[0].fields[0].values.buffer.length;\nlet job = Array(len).fill(undefined)\nif (isCombined) {\n    const field = data.series[0].fields.find(field => field.name === \"Job\")\n    if (field) {\n        job = field.values.buffer\n    }\n}\n\n\nfor (let i = 0; i < numDataPoints; i += 1) {\n    \n    if (OSMap[os[i]] === undefined) {\n        OSMap[os[i]] = {}\n    }\n\n    if (builds.includes(build[i])) {\n\n        if (OSMap[os[i]][build[i]] === undefined) {\n            OSMap[os[i]][build[i]] = {}\n        }\n\n        OSMap[os[i]][build[i]][job[i]] = {}\n\n        for (field of data.series[0].fields.filter(field => ![\"OS\", \"Build\"].includes(field.name))) {\n            OSMap[os[i]][build[i]][job[i]][field.name] = field.values.buffer[i]\n        }\n    }\n}\n\nfunction getField(name, selectedOS, job) {\n    if (name === \"Build\") {\n        return builds;\n    }\n    const values = []\n    for (const build of builds) {\n        if (OSMap[selectedOS] === undefined || OSMap[selectedOS][build] === undefined || OSMap[selectedOS][build][job] === undefined) {\n            values.push(0)\n        } else {\n            values.push(OSMap[selectedOS][build][job][name])\n        }   \n    }\n    return values;\n}\n\nconst traces = []\n\nlet jobs = [undefined]\nif (isCombined) {\n    jobs = [\"4node_1\", \"4node_2\"]\n}\n\nfor (const job of jobs) {\n    for (const os of selectedOS) {\n        traces.push({\n            x: getField(\"Build\", os, job),\n            y: getField(\"RerunTime(hrs)\", os, job),\n            marker: {size:10},\n            \"text\": getField(\"RerunTime(hrs)\", os, job),\n            \"mode\": \"text+markers+lines\",\n            \"textposition\": \"top\",\n            \"hoverinfo\": \"x+y+name\",\n            \"name\": job ? os + \" \" + job : os\n          });\n    }\n}\n  \nreturn { data:traces, layout: {} };"}, "pluginVersion": "7.2.1", "targets": [{"panelId": 2, "refId": "A"}], "timeFrom": null, "timeShift": null, "title": "Rerun Time (Hours)", "type": "ae3e-plotly-panel"}, {"datasource": null, "fieldConfig": {"defaults": {"custom": {"align": null, "filterable": false}, "mappings": [], "thresholds": {"mode": "absolute", "steps": [{"color": "green", "value": null}, {"color": "red", "value": 80}]}}, "overrides": [{"matcher": {"id": "byName", "options": "TC"}, "properties": [{"id": "displayName", "value": "Total"}]}, {"matcher": {"id": "byName", "options": "FC"}, "properties": [{"id": "displayName", "value": "Failed"}]}, {"matcher": {"id": "byName", "options": "PC"}, "properties": [{"id": "displayName", "value": "Passed"}]}, {"matcher": {"id": "byName", "options": "Rate"}, "properties": [{"id": "displayName", "value": "Pass Rate"}]}, {"matcher": {"id": "byName", "options": "#Runs"}, "properties": [{"id": "custom.width", "value": null}]}]}, "gridPos": {"h": 31, "w": 24, "x": 0, "y": 112}, "id": 2, "options": {"showHeader": true, "sortBy": []}, "pluginVersion": "7.2.1", "targets": [{"data": "", "refId": "A", "target": "regression_runs_build_sanity_${CLUSTER_SIZE}", "type": "table"}], "timeFrom": null, "timeShift": null, "title": "Regression Runs", "transformations": [], "type": "table"}], "refresh": "", "schemaVersion": 26, "style": "dark", "tags": [], "templating": {"list": [{"allValue": null, "current": {"selected": false, "text": ["CENTOS"], "value": ["CENTOS"]}, "hide": 0, "includeAll": false, "label": null, "multi": true, "name": "OS", "options": [{"selected": true, "text": "CENTOS", "value": "CENTOS"}, {"selected": false, "text": "OEL", "value": "OEL"}, {"selected": false, "text": "UBUNTU", "value": "UBUNTU"}, {"selected": false, "text": "DEBIAN", "value": "DEBIAN"}, {"selected": false, "text": "SUSE", "value": "SUSE"}, {"selected": false, "text": "WIN", "value": "WIN"}, {"selected": false, "text": "MAC", "value": "MAC"}], "query": "CENTOS,OEL,UBUNTU,DEBIAN,SUSE,WIN,MAC", "queryValue": "", "skipUrlSync": false, "type": "custom"}, {"allValue": null, "current": {"selected": false, "text": "4node_1_2", "value": "combo"}, "hide": 0, "includeAll": false, "label": null, "multi": false, "name": "CLUSTER_SIZE", "options": [{"selected": false, "text": "1node", "value": "1node"}, {"selected": false, "text": "4node", "value": "4node"}, {"selected": false, "text": "4node_1", "value": "4node_1"}, {"selected": false, "text": "4node_2", "value": "4node_2"}, {"selected": true, "text": "4node_1_2", "value": "combo"}], "query": "1node,4node,4node_1,4node_2,combo", "queryValue": "", "skipUrlSync": false, "type": "custom"}, {"allValue": null, "current": {"selected": false, "text": ["FC", "TC", "Rate", "PC"], "value": ["FC", "TC", "Rate", "PC"]}, "hide": 0, "includeAll": false, "label": null, "multi": true, "name": "METRICS", "options": [{"selected": true, "text": "Failed Count", "value": "FC"}, {"selected": true, "text": "Total Count", "value": "TC"}, {"selected": true, "text": "Pass Rate", "value": "Rate"}, {"selected": true, "text": "Pass Count", "value": "PC"}], "query": "FC,TC,Rate,PC", "skipUrlSync": false, "type": "custom"}]}, "time": {"from": "now-6h", "to": "now"}, "timepicker": {}, "timezone": "", "title": "Filter Metrics", "uid": "JpV16zlMk", "version": 10}}